import streamlit as st
from llama_index.llms.groq import Groq
import base64

# üöÄ Configura√ß√£o da p√°gina
st.set_page_config(page_title="Assistente de T√≥picos de F√≠sica", layout="wide")

# ----------------------------
# Fun√ß√µes para background
# ----------------------------
def get_base64_of_image(file):
    with open(file, "rb") as f:
        return base64.b64encode(f.read()).decode()

def set_background(image_file="bg.jpg", darkness=0.5):
    base64_str = get_base64_of_image(image_file)
    css = f"""
    <style>
    .stApp {{
        background-image: linear-gradient(rgba(0,0,0,{darkness}), rgba(0,0,0,{darkness})), 
                          url("data:image/jpeg;base64,{base64_str}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }}
    .title-box {{
        background: rgba(0, 0, 0, 0.3);
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        color: white;
        font-size: 28px;
        font-weight: bold;
        width: 70%;
        margin: auto;
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

# ----------------------------
# Fun√ß√µes do app
# ----------------------------
def explicar_topico(topico):
    if not topico:
        return "Por favor, insira um t√≥pico de F√≠sica."

    prompt = f"""
Voc√™ √© um professor de F√≠sica experiente. Explique detalhadamente o seguinte t√≥pico de F√≠sica: "{topico}".

Use o seguinte formato na resposta:

1. **Conceito fundamental e teoria**
2. **F√≥rmulas principais e explica√ß√£o**
3. **Exemplos pr√°ticos e aplica√ß√µes**
4. **Observa√ß√µes e dicas importantes**

Use Markdown e LaTeX para formatar t√≠tulos, listas e f√≥rmulas matem√°ticas.
"""
    try:
        resposta = st.session_state.llm.complete(prompt)
        if not resposta:
            return "N√£o foi poss√≠vel gerar a resposta. Tente novamente."
        return resposta
    except Exception as e:
        return f"Erro ao processar a pergunta: {e}"

# ----------------------------
# Interface
# ----------------------------
set_background("bg.jpg", darkness=0.5)

# Inicializa sess√£o
if "api_key" not in st.session_state:
    st.session_state.api_key = None
    st.session_state.llm = None

# P√°gina 1: Login
if not st.session_state.api_key:
    st.title("üîë Login para Assistente de F√≠sica")

    st.markdown(
        """
        Para gerar sua **API Key da Groq**, acesse:  
        üëâ [https://console.groq.com/keys](https://console.groq.com/keys)
        """,
        unsafe_allow_html=True,
    )

    api_key_input = st.text_input("Insira sua API Key da Groq:", type="password")

    if st.button("Entrar"):
        if api_key_input.strip():
            try:
                # Testa o LLM antes de liberar
                llm = Groq(model="llama-3.1-8b-instant", api_key=api_key_input.strip())
                _ = llm.complete("Teste r√°pido.")
                st.session_state.api_key = api_key_input.strip()
                st.session_state.llm = llm
                st.success("‚úÖ Login realizado com sucesso!")
                st.rerun()   # üîÑ Atualiza a tela
            except Exception as e:
                st.error(f"Erro ao validar a chave: {e}")
        else:
            st.warning("‚ö†Ô∏è Digite sua chave de API para continuar.")

# P√°gina 2: Aplica√ß√£o principal
else:
    col1, col2, col3 = st.columns([1, 1.7, 1]) 

    with col2:
        st.title("‚öõÔ∏è Assistente de T√≥picos de F√≠sica")  
        topico = st.text_input(
            "Insira o t√≥pico de F√≠sica", 
            placeholder="Ex: Lei da Gravita√ß√£o Universal"
        )

        if st.button("Explicar"):
            with st.spinner("Gerando explica√ß√£o..."):
                resposta = explicar_topico(topico)
                st.markdown(resposta, unsafe_allow_html=True)

    # Bot√£o de logout
    if st.button("üö™ Sair"):
        st.session_state.api_key = None
        st.session_state.llm = None
        st.rerun()   # üîÑ Atualiza a tela
